{"version":3,"sources":["Components/Statictics/Statistics.styled.js","Components/Statictics/Statistics.js","Components/FeedbackOptions/FeedbackOptions.styled.js","Components/FeedbackOptions/FeedbackOptions.js","Components/Section/Section.styled.js","Components/Section/Section.js","Components/Notification/Notification.js","App.styled.js","App.js","index.js"],"names":["Item","styled","li","Statistics","good","neutral","bad","total","positivePercentage","Button","button","Container","ul","FeedbackOptions","options","onLeaveFeedback","map","option","index","type","name","onClick","Title","h1","Section","title","children","Notification","message","Wrap","div","App","useState","setGood","setNeutral","setBad","countTotalFeedback","stateGood","stateNeutral","stateBad","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAGaA,EAAOC,IAAOC,GAAV,iD,OCkCFC,EAlCI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAE7C,OACE,8BACE,+BACE,cAACR,EAAD,UACE,0CAAaI,OAEf,cAACJ,EAAD,UACE,6CAAgBK,OAElB,cAACL,EAAD,UACE,yCAAYM,OAEd,cAACN,EAAD,UACE,2CAAcO,OAEhB,cAACP,EAAD,UACE,wDAA2BI,EAAO,EAAII,EAAqB,IAA3D,eCnBCC,EAASR,IAAOS,OAAV,4MAWNC,EAAYV,IAAOW,GAAV,oDAITZ,EAAOC,IAAOC,GAAV,2ECYFW,EA1BS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAChC,OACE,cAACJ,EAAD,UACGG,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,cAAC,EAAD,UACE,cAACT,EAAD,CAEEU,KAAK,SACLC,KAAMH,EACNI,QAAS,kBAAMN,EAAgBE,IAJjC,SAMGA,KAPMC,SCENI,EANDrB,IAAOsB,GAAV,gGCiBIC,EAfC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACE,gCACE,cAAC,EAAD,UAAQD,IACPC,MCIMC,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OACC,mCACC,4BAAIA,OCQQC,G,MAZF5B,IAAO6B,IAAV,8PC2DKC,MAjDf,WACC,MAAwBC,mBAAS,GAAjC,mBAAO5B,EAAP,KAAa6B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAO3B,EAAP,KAAgB6B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAO1B,EAAP,KAAY6B,EAAZ,KAqBMC,EAAqB,kBAAMhC,EAAOC,EAAUC,GAIlD,OACC,eAAC,EAAD,WACC,cAAC,EAAD,CAASmB,MAAM,yBAAf,SACC,cAAC,EAAD,CAAiBX,QAAS,CAAC,OAAQ,UAAW,OAAQC,gBA1BjC,SAACD,GACxB,OAAQA,GACP,IAAK,OACJmB,GAAQ,SAACI,GAAD,OAAeA,EAAY,KACnC,MAED,IAAK,UACJH,GAAW,SAACI,GAAD,OAAkBA,EAAe,KAC5C,MAED,IAAK,MACJH,GAAO,SAACI,GAAD,OAAcA,EAAW,WAkBhCH,IACC,cAAC,EAAD,CAASX,MAAM,aAAf,SACC,cAAC,EAAD,CACCrB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO6B,IACP5B,mBAdLgC,KAAKC,MAAc,IAAPrC,EAAcgC,SAiBrB,cAAC,EAAD,CAAcR,QAAQ,0BClD7Bc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.6010d46d.chunk.js","sourcesContent":["  \r\nimport styled from \"@emotion/styled\";\r\n\r\nexport const Item = styled.li`\r\npadding-right:10px;\r\n`;","import PropTypes from \"prop-types\";\r\nimport { Item } from \"./Statistics.styled\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n \r\n    return (\r\n      <div>\r\n        <ul>\r\n          <Item>\r\n            <span>Good: {good}</span>\r\n          </Item>\r\n          <Item>\r\n            <span>Neutral: {neutral}</span>\r\n          </Item>\r\n          <Item>\r\n            <span>Bad: {bad}</span>\r\n          </Item>\r\n          <Item>\r\n            <span>Total: {total}</span>\r\n          </Item>\r\n          <Item>\r\n            <span>Positive feedback:  {good > 0 ? positivePercentage : \"0\"}%</span>\r\n          </Item>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\n  background-color: inherit;\r\n  border: 2px solid teal;\r\n  border-radius: 4px;\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: yellowgreen;\r\n    border-color:yellowgreen;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.ul`\r\n  /* display: flex; */\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  margin-right: 25px;\r\n  padding-bottom:10px;\r\n`;","import PropTypes from \"prop-types\";\r\nimport { Button, Container, Item } from \"./FeedbackOptions.styled\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) =>{  \r\n    return (\r\n      <Container>\r\n        {options.map((option, index) => (\r\n          <Item key={index}>\r\n            <Button\r\n              \r\n              type=\"button\"\r\n              name={option}\r\n              onClick={() => onLeaveFeedback(option)}\r\n            >\r\n              {option}\r\n            </Button>\r\n          </Item>\r\n        \r\n        ))}\r\n      </Container>\r\n    );\r\n  }\r\n\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Title = styled.h1`\r\n  margin-bottom: 20px;\r\n  font-size: 35px;\r\n  font-weight: normal;\r\n`;\r\n\r\nexport default Title;","\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport Title from \"./Section.styled\";\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n      <div>\r\n        <Title>{title}</Title>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.object,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>{message}</p>\r\n\t\t</>\r\n\t);\r\n};\r\nNotification.propTypes = {\r\n\tmessage: PropTypes.string.isRequired\r\n};\r\nexport default Notification;","import styled from \"@emotion/styled\";\r\n\r\nconst Wrap = styled.div`\r\n  border-bottom-style:inset;\r\n  max-width: 1170px;\r\n  min-height: 300px;\r\n    margin-left: auto;  \r\n    margin-right: auto;\r\n    padding-top: 160px;\r\n    padding-left: 160px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport default Wrap;","\r\nimport React, { useState } from \"react\";\r\n\r\nimport Statistics from \"./Components/Statictics/Statistics\";\r\nimport FeedbackOptions from \"./Components/FeedbackOptions/FeedbackOptions\";\r\nimport Section from \"./Components/Section/Section\";\r\nimport Notification from \"./Components/Notification/Notification\";\r\n\r\nimport \"./index.css\";\r\nimport \"./App.css\";\r\nimport Wrap from \"./App.styled\";\r\n\r\nfunction App() {\r\n\tconst [good, setGood] = useState(0);\r\n\tconst [neutral, setNeutral] = useState(0);\r\n\tconst [bad, setBad] = useState(0);\r\n\r\n\tconst onLeaveFeedback = (options) => {\r\n\t\tswitch (options) {\r\n\t\t\tcase \"good\":\r\n\t\t\t\tsetGood((stateGood) => stateGood + 1);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"neutral\":\r\n\t\t\t\tsetNeutral((stateNeutral) => stateNeutral + 1);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"bad\":\r\n\t\t\t\tsetBad((stateBad) => stateBad + 1);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst countTotalFeedback = () => good + neutral + bad;\r\n\r\n\tconst positivePercentage = () =>\r\n\t\tMath.round((good * 100) / countTotalFeedback());\r\n\treturn (\r\n\t\t<Wrap>\r\n\t\t\t<Section title=\"Please leave feedback:\">\r\n\t\t\t\t<FeedbackOptions options={[\"good\", \"neutral\", \"bad\"]} onLeaveFeedback={onLeaveFeedback} />\r\n\t\t\t</Section>\r\n\r\n\t\t\t{countTotalFeedback() ?  (\r\n\t\t\t\t\t<Section title=\"Statistics\">\r\n\t\t\t\t\t\t<Statistics\r\n\t\t\t\t\t\t\tgood={good}\r\n\t\t\t\t\t\t\tneutral={neutral}\r\n\t\t\t\t\t\t\tbad={bad}\r\n\t\t\t\t\t\t\ttotal={countTotalFeedback()}\r\n\t\t\t\t\t\t\tpositivePercentage={positivePercentage()}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Section>\r\n\t\t\t\t): <Notification message=\"No feedback given\" />\r\n\t}\r\n\t\t</ Wrap>\r\n\t)\r\n}\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}